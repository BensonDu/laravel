<?php
/**
 * Created by PhpStorm.
 * User: Benson
 * Date: 16/3/27
 * Time: 下午1:02
 */

namespace App\Http\Model\Cache;

use PRedis;

/*
|--------------------------------------------------------------------------
| 缓存操作基础模块
|--------------------------------------------------------------------------
*/
class BaseModel
{
    /*
    |--------------------------------------------------------------------------
    | 获取缓存
    |--------------------------------------------------------------------------
    */
    public static function get($key,$array = false){
        $ret = PRedis::get($key);
        return $array ? unserialize($ret) : $ret;
    }
    /*
    |--------------------------------------------------------------------------
    | 设置缓存
    |--------------------------------------------------------------------------
    */
    public static function set($key,$value = '',$ttl = 300){
        $data = is_string($value) ? $value : serialize($value);
        return !empty($ttl) ? PRedis::setex($key,$ttl,$data) : PRedis::set($key,$data);
    }
    /*
    |--------------------------------------------------------------------------
    | 设置缓存递增
    |--------------------------------------------------------------------------
    */
    public static function incrby($key,$number = 1){
        return PRedis::incrby($key,$number);
    }
    /*
    |--------------------------------------------------------------------------
    | 删除String缓存
    |--------------------------------------------------------------------------
    */
    public static function del($key){
        return PRedis::del($key);
    }
    /*
    |--------------------------------------------------------------------------
    | 缓存是否存在
    |--------------------------------------------------------------------------
    */
    public static function exists($key){
        return PRedis::exists($key);
    }
    /*
    |--------------------------------------------------------------------------
    | 设置缓存生存时间
    |--------------------------------------------------------------------------
    */
    public static function expire($key,$ttl){
        return PRedis::expire($key,$ttl);
    }
    /*
    |--------------------------------------------------------------------------
    | 选取缓存数据库
    |--------------------------------------------------------------------------
    */
    public static function select($index = 0){
        return PRedis::select($index);
    }
    /*
    |--------------------------------------------------------------------------
    | 获取Hash缓存
    |--------------------------------------------------------------------------
    */
    public static function hget($key,$field,$array = false){
        $ret = PRedis::hget($key,$field);
        return $array ? unserialize($ret) : $ret;
    }
    /*
    |--------------------------------------------------------------------------
    | 设置Hash缓存
    |--------------------------------------------------------------------------
    */
    public static function hset($key,$field,$val,$ttl = null){
        $data = is_string($val) ? $val : serialize($val);
        PRedis::hset($key,$field,$data);
        if(!is_null($ttl))self::expire($key,$ttl);
        return true;
    }
    /*
    |--------------------------------------------------------------------------
    | 设置Hash field + 1
    |--------------------------------------------------------------------------
    */
    public static function hincrby($key,$field,$number = 1){
        return PRedis::hincrby($key,strval($field),$number);
    }
    /*
    |--------------------------------------------------------------------------
    | 返回hash所有key
    |--------------------------------------------------------------------------
    */
    public static function hkeys($key){
        return PRedis::hkeys($key);
    }
    /*
    |--------------------------------------------------------------------------
    | 返回hash所有key value
    |--------------------------------------------------------------------------
    */
    public static function hgetall($key){
        return PRedis::hgetall($key);
    }
    /*
    |--------------------------------------------------------------------------
    | Hash缓存是否存在
    |--------------------------------------------------------------------------
    */
    public static function hexists($key,$field){
        return PRedis::hexists($key,$field);
    }
    /*
    |--------------------------------------------------------------------------
    | Hash删除域
    |--------------------------------------------------------------------------
    */
    public static function hdel($key,$field){
        return PRedis::hdel($key,$field);
    }

}